/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useLayoutEffect, useRef } from 'react'
import { useGLTF, Html } from '@react-three/drei'
import { useLoader } from '@react-three/fiber'
import { TextureLoader } from 'three/src/loaders/TextureLoader'
import { SRGBColorSpace } from 'three'

export default function Mechaniekers(props) {
const { nodes } = useGLTF('/models/mechaniekers-no-materials.glb')
const colorMap = useLoader(TextureLoader, '/models/textures/mechaniekers-baked.webp')
colorMap.flipY = false
colorMap.colorSpace = SRGBColorSpace

const hotspotRef = useRef(null)
const labelRef = useRef(null)

useLayoutEffect(() => {
  //trying to get the elements after the component is mounted
  let observer
  let attempts = 0
  const maxAttempts = 5

  const initializeGsap = () => {
    if (hotspotRef.current && labelRef.current) {
      console.log('Elements found, initializing GSAP')
      props.labelGsap()
      props.hotspotGsap(props.hasClickHappened)
      if (observer) observer.disconnect()
      return true
    }
    return false
  }

  // First attempt - immediate
  if (!initializeGsap() && attempts < maxAttempts) {
    // Second attempt - small timeout
    setTimeout(() => {
      if (!initializeGsap() && attempts < maxAttempts) {
        // Final approach - observe DOM changes
        observer = new MutationObserver((mutations, obs) => {
          attempts++
          if (initializeGsap() || attempts >= maxAttempts) {
            obs.disconnect()
          }
        })

        observer.observe(document.body, {
          childList: true,
          subtree: true
        })
      }
    }, 100)
  }

  return () => {
    if (observer) observer.disconnect()
  }
}, [])

  return (
    <group onClick={(e) => {
      e.stopPropagation()
      props.handleClick()
    }} dispose={null}>
      <group
        >
        <mesh
          receiveShadow
          geometry={nodes.mechaniekers.geometry}
        >
          <Html
            position={ [0.6,1.25,1.2]}
            wrapperClass='label-wrapper'
            distanceFactor={7}
            occlude>
              <p 
                ref={labelRef}
                onClick={(e) => {
                e.stopPropagation()
                props.handleClick()
                }} 
                className={`building-label ${props.active ? 'building-label--active' : ''}`}>{props.label}
              </p>
          </Html>
          <Html position={[-0.5,0,0.2]}
              wrapperClass='hotspot-wrapper'
            >
            <svg 
            opacity={props.hasClickHappened ? 0 : 1}
            ref={hotspotRef}
            id="hotspot" 
            width="22" 
            height="22" 
            viewBox="0 0 22 22" 
            fill="none" 
            xmlns="http://www.w3.org/2000/svg">
              <circle id='hotspot__circle' cx="11" cy="11" r="9" stroke="white" strokeWidth="0.1"/>
              <circle cx="11" cy="11" r="7" fill="#DEC1FB"/>
            </svg>
          </Html>
          <meshStandardMaterial 
          map={colorMap}
          emissive="#BC78FF" 
          emissiveIntensity={props.active ? 3.0 : 0} />
        </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/models/mechaniekers-no-materials.glb')
