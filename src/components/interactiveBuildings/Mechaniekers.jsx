/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useRef, useState, useEffect } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { useLoader } from "@react-three/fiber";
import { TextureLoader } from "three/src/loaders/TextureLoader";
import { SRGBColorSpace } from "three";
import { gsap } from "gsap";
import { useGSAP } from "@gsap/react";

export default function Mechaniekers(props, onEnterBack) {
  const { nodes } = useGLTF("/models/mechaniekers-no-materials.glb");
  const colorMap = useLoader(
    TextureLoader,
    "/models/textures/mechaniekers-baked.webp"
  );
  colorMap.flipY = false;
  colorMap.colorSpace = SRGBColorSpace;

  const hotspot = useRef(null);
  const [hasAnimation, setHasAnimation] = useState(false);

  useGSAP(
    () => {
      if (
        window.innerWidth > 768 &&
        !props.loading &&
        props.onEnterBack !== null
      ) {
        if (props.hasClickHappened || props.onEnterBack) {
          gsap.to("#hotspot", {
            scale: 0,
            ease: "power1.inOut",
            overwrite: true,
          });
        } else {
          gsap.to("#hotspot", {
            scale: 1,
            ease: "bounce.out",
            delay: 2,
            overwrite: true,
          });
          if (!hasAnimation) {
            gsap.to("#hotspot__circle", {
              strokeWidth: 4.2,
              repeat: -1,
              yoyo: true,
              duration: 1,
            });
            setHasAnimation(true);
          }
        }
      }
    },
    {
      scope: hotspot,
      dependencies: [props.hasClickHappened, props.loading, props.onEnterBack],
    }
  );

  const label = useRef();

  useEffect(() => {
    props.timeline?.current?.to(
      label.current,
      {
        opacity: 1,
        cursor: "pointer",
        duration: 0.25,
        ease: "power2.out",
      },
      0.25
    );
  }, [label.current]);

  return (
    <group
      onClick={(e) => {
        e.stopPropagation();
        props.handleClick();
      }}
      dispose={null}
    >
      <group>
        <mesh receiveShadow geometry={nodes.mechaniekers.geometry}>
          <Html
            position={[0.6, 1.25, 1.2]}
            wrapperClass="label-wrapper"
            distanceFactor={7}
            occlude
          >
            <p
              ref={label}
              onClick={(e) => {
                e.stopPropagation();
                props.handleClick();
              }}
              className={`building-label ${props.active ? "building-label--active" : ""}`}
            >
              {props.label}
            </p>
          </Html>
          <Html
            ref={hotspot}
            position={[-0.5, 0, 0.2]}
            wrapperClass="hotspot-wrapper"
          >
            <svg
              opacity={props.hasClickHappened ? 0 : 1}
              id="hotspot"
              width="22"
              height="22"
              viewBox="0 0 22 22"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle
                id="hotspot__circle"
                cx="11"
                cy="11"
                r="9"
                stroke="white"
                strokeWidth="0.1"
              />
              <circle cx="11" cy="11" r="7" fill="#DEC1FB" />
            </svg>
          </Html>
          <meshStandardMaterial
            map={colorMap}
            emissive="#BC78FF"
            emissiveIntensity={props.active ? 3.0 : 0}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/models/mechaniekers-no-materials.glb");
